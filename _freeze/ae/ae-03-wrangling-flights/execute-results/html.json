{
  "hash": "17b1768c930a2a65e444b79d960319a3",
  "result": {
    "markdown": "---\ntitle: \"AE 03: Wrangling flights\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta199-f22-1) and locate the repo titled `ae-03-YOUR_GITHUB_USERNAME` to get started.\n\nThis AE is due Friday, Sep 16 at 11:59pm.\n:::\n\nTo demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package.\nIt includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\nThe data frame has over 336,000 observations (rows), 336776 observations to be exact, so we will **not** view the entire data frame.\nInstead we'll use the commands below to help us explore the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\nThe `head()` function returns \"A tibble: 6 x 19\" and then the first six rows of the `flights` data.\n\n# Tibble vs. data frame\n\nA **tibble** is an opinionated version of the `R` data frame.\nIn other words, all tibbles are data frames, but not all data frames are tibbles!\n\nThere are two main differences between a tibble and a data frame:\n\n1.  When you print a tibble, the first ten rows and all of the columns that fit on the screen will display, along with the type of each column.\n\nLet's look at the differences in the output when we type `flights` (tibble) in the console versus typing `cars` (data frame) in the console.\n\n2.  Second, tibbles are somewhat more strict than data frames when it comes to subsetting data. You will get an error message if you try to access a variable that doesn't exist in a tibble. You will get `NULL` if you try to access a variable that doesn't exist in a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights$apple\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `apple`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\ncars$apple\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n# Data wrangling with `dplyr`\n\n**dplyr** is the primary package in the tidyverse for data wrangling.\n[Click here](https://dplyr.tidyverse.org/) for the dplyr reference page.\n[Click here](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf) for the dplyr cheatsheet.\n\nQuick summary of key dplyr functions[^1]:\n\n[^1]: From [dplyr vignette](https://dplyr.tidyverse.org/articles/dplyr.html)\n\n**Rows:**\n\n-   `filter()`:chooses rows based on column values.\n-   `slice()`: chooses rows based on location.\n-   `arrange()`: changes the order of the rows\n-   `sample_n()`: take a random subset of the rows\n\n**Columns:**\n\n-   `select()`: changes whether or not a column is included.\n-   `rename()`: changes the name of columns.\n-   `mutate()`: changes the values of columns and creates new columns.\n\n**Groups of rows:**\n\n-   `summarise()`: collapses a group into a single row.\n-   `count()`: count unique values of one or more variables.\n-   `group_by()`: perform calculations separately for each value of a variable\n\n## `select()`\n\n-   Demo: Make a data frame that only contains the variables `dep_delay` and `arr_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelays <- flights |>\n  select(dep_delay, arr_delay)\n\ndelays\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   Demo: Make a data frame that keeps every variable except `dep_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove_dep_delay <- flights |>\n  select(-dep_delay)\n\nremove_dep_delay\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 18\n    year month   day dep_time sched_dep…¹ arr_t…² sched…³ arr_d…⁴ carrier flight\n   <int> <int> <int>    <int>       <int>   <int>   <int>   <dbl> <chr>    <int>\n 1  2013     1     1      517         515     830     819      11 UA        1545\n 2  2013     1     1      533         529     850     830      20 UA        1714\n 3  2013     1     1      542         540     923     850      33 AA        1141\n 4  2013     1     1      544         545    1004    1022     -18 B6         725\n 5  2013     1     1      554         600     812     837     -25 DL         461\n 6  2013     1     1      554         558     740     728      12 UA        1696\n 7  2013     1     1      555         600     913     854      19 B6         507\n 8  2013     1     1      557         600     709     723     -14 EV        5708\n 9  2013     1     1      557         600     838     846      -8 B6          79\n10  2013     1     1      558         600     753     745       8 AA         301\n# … with 336,766 more rows, 8 more variables: tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​arr_time, ³​sched_arr_time, ⁴​arr_delay\n```\n:::\n:::\n\n\n-   Demo: Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange_year_dep_delay <- flights |>\n  select(year:dep_delay)\n\nrange_year_dep_delay\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   Demo: Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `\"arr\\_\"` in the name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrival_info <- flights |>\n  select(contains(\"arr_\"))\n\narrival_info\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n## The pipe\n\nBefore working with more data wrangling functions, let's formally introduce the pipe.\nThe **pipe**, `|>`, is an operator (a tool) for passing information from one process to another.\nWe will use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.\n\nWhen reading code \"in English\", say \"and then\" whenever you see a pipe.\n\n-   **Your turn (4 minutes):** Run the following chunk and observe its output. Then, come up with a different way of obtaining the same output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(dep_delay, arr_delay) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  dep_delay arr_delay\n      <dbl>     <dbl>\n1         2        11\n2         4        20\n3         2        33\n4        -1       -18\n5        -6       -25\n6        -4        12\n```\n:::\n:::\n\n\n## `slice()`\n\n-   Demo: Display the first five rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_head(flights, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   Demo: Display the last two rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_tail(flights, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     9    30       NA        1159      NA      NA    1344      NA MQ     \n2  2013     9    30       NA         840      NA      NA    1020      NA MQ     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## `arrange()`\n\n-   Demo: Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.\n\n**Question: What does it mean for the `dep_delay` to have a negative value?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(flights, dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    12     7     2040       2123     -43      40    2352      48 B6     \n 2  2013     2     3     2022       2055     -33    2240    2338     -58 DL     \n 3  2013    11    10     1408       1440     -32    1549    1559     -10 EV     \n 4  2013     1    11     1900       1930     -30    2233    2243     -10 DL     \n 5  2013     1    29     1703       1730     -27    1947    1957     -10 F9     \n 6  2013     8     9      729        755     -26    1002     955       7 MQ     \n 7  2013    10    23     1907       1932     -25    2143    2143       0 EV     \n 8  2013     3    30     2030       2055     -25    2213    2250     -37 MQ     \n 9  2013     3     2     1431       1455     -24    1601    1631     -30 9E     \n10  2013     5     5      934        958     -24    1225    1309     -44 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   Demo: Now let's arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(flights, desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     6    27      959       1900     899    1236    2226     850 DL     \n 9  2013     7    22     2257        759     898     121    1026     895 DL     \n10  2013    12     5      756       1700     896    1058    2020     878 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   **Your turn (5 minutes):** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight? *Share your response on Slack on the relevant thread on #general **using code formatting**.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongest_delays <- flights |>\n  select(tailnum, carrier, dep_delay) |>\n  slice_max(dep_delay)\n\nlongest_delays\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  tailnum carrier dep_delay\n  <chr>   <chr>       <dbl>\n1 N384HA  HA           1301\n```\n:::\n:::\n\n\n## `filter()`\n\n-   Demo: Filter the data frame by selecting the rows where the destination airport is RDU.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter(dest==\"RDU\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1240       1235       5    1415    1415       0 MQ     \n 9  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n10  2013     1     1     1449       1450      -1    1651    1640      11 MQ     \n# … with 8,153 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   Demo: We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter(dest == \"RDU\" & arr_delay < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n 9  2013     1     1     1505       1510      -5    1654    1655      -1 MQ     \n10  2013     1     1     1800       1800       0    1945    1951      -6 B6     \n# … with 4,222 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\nWe can do more complex tasks using logical operators:\n\n| operator      | definition                   |\n|:--------------|:-----------------------------|\n| `<`           | is less than?                |\n| `<=`          | is less than or equal to?    |\n| `>`           | is greater than?             |\n| `>=`          | is greater than or equal to? |\n| `==`          | is exactly equal to?         |\n| `!=`          | is not equal to?             |\n| `x & y`       | is x AND y?                  |\n| `x \\| y`      | is x OR y?                   |\n| `is.na(x)`    | is x NA?                     |\n| `!is.na(x)`   | is x not NA?                 |\n| `x %in% y`    | is x in y?                   |\n| `!(x %in% y)` | is x not in y?               |\n| `!x`          | is not x?                    |\n\nThe final operator only makes sense if `x` is logical (TRUE / FALSE).\n\n-   **Your turn (4 minutes):** Describe what the code is doing in words. *Share your response on Slack on the relevant thread on #general.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n## `count()`\n\n-   Demo: Create a frequency table of the destination locations for flights from New York.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(flights, dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 105 × 2\n   dest      n\n   <chr> <int>\n 1 ABQ     254\n 2 ACK     265\n 3 ALB     439\n 4 ANC       8\n 5 ATL   17215\n 6 AUS    2439\n 7 AVL     275\n 8 BDL     443\n 9 BGR     375\n10 BHM     297\n# … with 95 more rows\n```\n:::\n:::\n\n\n-   Demo: In which month was there the fewest number of flights? How many flights were there in that month?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> count(month) |>\n  arrange(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n   month     n\n   <int> <int>\n 1     2 24951\n 2     1 27004\n 3    11 27268\n 4     9 27574\n 5    12 28135\n 6     6 28243\n 7     4 28330\n 8     5 28796\n 9     3 28834\n10    10 28889\n11     8 29327\n12     7 29425\n```\n:::\n:::\n\n\n-   **Your turn (5 minutes):** On which date (month + day) was there the largest number of flights? How many flights were there on that day? *Share your response on Slack on the relevant thread on #general using code formatting.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(month, day) |> \n  count() |>\n  arrange(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 3\n# Groups:   month, day [365]\n   month   day     n\n   <int> <int> <int>\n 1    11    28   634\n 2    11    29   661\n 3     1    19   674\n 4    10    12   676\n 5     1    26   680\n 6     8    31   680\n 7     2     2   682\n 8     9    28   682\n 9     2     9   684\n10    10    19   684\n# … with 355 more rows\n```\n:::\n:::\n\n\n## `mutate()`\n\nUse `mutate()` to create a new variable.\n\n-   Demo: In the code chunk below, `air_time` (minutes in the air) is converted to hours, and then new variable `mph` is created, corresponding to the miles per hour of the flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> mutate(mph = distance / (air_time / 60))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 20\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 10 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, mph <dbl>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   **Your turn (4 minutes):** Create a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  mutate(months_perc = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   month     n months_perc\n   <int> <int>       <dbl>\n 1     1 27004        8.02\n 2     2 24951        7.41\n 3     3 28834        8.56\n 4     4 28330        8.41\n 5     5 28796        8.55\n 6     6 28243        8.39\n 7     7 29425        8.74\n 8     8 29327        8.71\n 9     9 27574        8.19\n10    10 28889        8.58\n11    11 27268        8.10\n12    12 28135        8.35\n```\n:::\n:::\n\n\n## `summarize()`\n\n`summarize()` collapses the rows into summary statistics and removes columns irrelevant to the calculation.\n\nBe sure to name your columns!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  summarize(mean_dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1             NA\n```\n:::\n:::\n\n\n**Question: Why did this code return `NA`?**\n\nLet's fix it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1           12.6\n```\n:::\n:::\n\n\n## `group_by()`\n\n`group_by()` is used for grouped operations.\nIt's very powerful when paired with `summarise()` to calculate summary statistics by group.\n\nHere we find the mean and standard deviation of departure delay for each month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(month) |>\n  summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE),\n            stdev_dep_delay = sd(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   month mean_dep_delay stdev_dep_delay\n   <int>          <dbl>           <dbl>\n 1     1          10.0             36.4\n 2     2          10.8             36.3\n 3     3          13.2             40.1\n 4     4          13.9             43.0\n 5     5          13.0             39.4\n 6     6          20.8             51.5\n 7     7          21.7             51.6\n 8     8          12.6             37.7\n 9     9           6.72            35.6\n10    10           6.24            29.7\n11    11           5.44            27.6\n12    12          16.6             41.9\n```\n:::\n:::\n\n\n-   **Your turn (4 minutes):** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay? *Share your response on Slack on the relevant thread.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(origin) |>\n  summarize(med_dep_delay = median(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  origin med_dep_delay\n  <chr>          <dbl>\n1 EWR               -1\n2 JFK               -1\n3 LGA               -3\n```\n:::\n:::\n\n\n# Additional Practice\n\n1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflight_times <- flights |>\n  mutate(dep_delay_hours = dep_delay / 60) |>\n  select(year, month, day, dep_time, dep_delay, dep_delay_hours)\n\nflight_times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time dep_delay dep_delay_hours\n   <int> <int> <int>    <int>     <dbl>           <dbl>\n 1  2013     1     1      517         2          0.0333\n 2  2013     1     1      533         4          0.0667\n 3  2013     1     1      542         2          0.0333\n 4  2013     1     1      544        -1         -0.0167\n 5  2013     1     1      554        -6         -0.1   \n 6  2013     1     1      554        -4         -0.0667\n 7  2013     1     1      555        -5         -0.0833\n 8  2013     1     1      557        -3         -0.05  \n 9  2013     1     1      557        -3         -0.05  \n10  2013     1     1      558        -2         -0.0333\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecific_flight_info <- flights |>\n  group_by(tailnum) |>\n  summarize(num_flights = n(),\n            mean_dist = mean(distance, na.rm = TRUE),\n            stdev_dist = sd(distance, na.rm = TRUE))\n\nrbind(slice_min(specific_flight_info, mean_dist, n = 5), \n      slice_max(specific_flight_info, mean_dist, n = 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 4\n   tailnum num_flights mean_dist stdev_dist\n   <chr>         <int>     <dbl>      <dbl>\n 1 N955UW          225      173.       32.9\n 2 N948UW          232      174.       32.7\n 3 N959UW          213      174.       34.3\n 4 N956UW          222      174.       31.4\n 5 N945UW          285      176.       31.2\n 6 N380HA           40     4983         0  \n 7 N381HA           25     4983         0  \n 8 N382HA           26     4983         0  \n 9 N383HA           26     4983         0  \n10 N384HA           33     4983         0  \n11 N385HA           28     4983         0  \n12 N386HA           25     4983         0  \n13 N388HA           36     4983         0  \n14 N389HA           32     4983         0  \n15 N390HA           20     4983         0  \n16 N391HA           21     4983         0  \n17 N392HA           13     4983         0  \n18 N393HA           10     4983         0  \n19 N395HA            7     4983         0  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}