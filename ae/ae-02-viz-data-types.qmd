---
title: "AE 02: Visualizing penguins"
categories: 
  - Application exercise
editor: visual
execute:
  fig-width: 7
  fig-asp: 4
  fig-align: center
  warning: false
---

::: callout-important
Go to the [course GitHub organization](https://github.com/sta199-f22-1) and locate the repo titled `ae-02-YOUR_GITHUB_USERNAME` to get started.

This AE is due Sunday, Sep 11 at 11:59pm.
:::

For all analyses, we'll use the **tidyverse** and **palmerpenguins** packages.

```{r}
#| label: load-packages
#| warning: false

library(tidyverse)
library(palmerpenguins)
```

The dataset we will visualize is called `penguins`.
Let's `glimpse()` at it.

```{r}
#| label: glimpse

glimpse(penguins)
```

# Visualizing penguin weights - Demo

## Single variable

::: callout-note
Analyzing the a single variable is called **univariate** analysis.
:::

Create visualizations of the distribution of `weight`s of penguins.

1.  Make a histogram. Set an appropriate binwidth.

```{r}
#| label: histogram-weight

ggplot(penguins, aes(x = body_mass_g)) + 
  geom_histogram(binwidth = 250) + 
  labs(
    x = "Weights of Penguins",
    y = "Counts",
    title = "Distribution of Penguin Weights"
  )
```

2.  Make a boxplot.

```{r}
#| label: boxplot-weight

ggplot(penguins, aes(x = body_mass_g)) + 
  geom_boxplot() + 
  labs(
    x = "Weights of Penguins",
    title = "Weights of Penguins")
```

3.  Based on these, determine if each of the following statements about the shape of the distribution is true or false.
    -   The distribution of penguin weights in this sample is left skewed. **FALSE**
    -   The distribution of penguin weights in this sample is unimodal. **TRUE**

## Two variables

::: callout-note
Analyzing the relationship between two variables is called **bivariate** analysis.
:::

Create visualizations of the distribution of `weight`s of penguins by `species`.

4.  Make a single histogram. Set an appropriate binwidth.

```{r}
#| label: histogram-weight-species

ggplot(penguins, aes(x = body_mass_g, fill = species)) + 
  geom_histogram(binwidth = 250) + 
  labs(
    x = "Weights of Penguins",
    y = "Counts",
    title = "Distribution of Weights of Penguins by Species")
```

5.  Use multiple histograms via faceting, one for each species. Set an appropriate binwidth, add color as you see fit, and turn off legends if not needed.

```{r}
#| label: histogram-weight-species-facet

ggplot(penguins, aes(x = body_mass_g)) + 
  geom_histogram(binwidth = 250) + 
  facet_wrap(~species) + 
  labs(
    x = "Weights of Penguins",
    y = "Counts",
    title = "Distribution of Weights of Penguins by Species")
```

6.  Use side-by-side box plots. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: boxplot-weight-species

ggplot(penguins, aes(y = body_mass_g, color = species)) + 
  geom_boxplot() + 
  facet_wrap(~species) + 
  labs(
    y = "Weights of Penguins",
    title = "Distribution of Weights of Penguins by Species") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(), 
        legend.position = "none")
```

7.  Use density plots. Add color as you see fit.

```{r}
#| label: density-weight-species

ggplot(penguins, aes(x = body_mass_g, color = species)) + 
  geom_density() + 
  facet_wrap(~species) + 
  labs(
    x = "Weights of Penguins",
    title = "Distribution of Weights of Penguins by Species") +
  theme(legend.position = "none")
```

8.  Use violin plots. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: violin-weight-species

ggplot(penguins, aes(x = body_mass_g, color = species)) + 
  geom_violin() + 
  facet_wrap(~species) + 
  labs(
    x = "Weights of Penguins",
    title = "Distribution of Weights of Penguins by Species") +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(), 
        legend.position = "none")
```

9.  Make a jittered scatter plot. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: jitter-weight-species

# add code here
```

10. Use beeswarm plots. Add color as you see fit and turn off legends if not needed.

```{r}
#| label: beeswarm-weight-species

# add code here
```

11. Use multiple geoms on a single plot. Be deliberate about the order of plotting. Change the theme and the color scale of the plot. Finally, add informative labels.

```{r}
#| label: multi-geoms

# add code here
```

## Multiple variables

::: callout-note
Analyzing the relationship between three or more variables is called **multivariate** analysis.
:::

12. Facet the plot you created in the previous exercise by `island`. Adjust labels accordingly.

```{r}
#| label: multi-geoms-facet

# add code here
```

Before you continue, let's turn off all warnings the code chunks generate and resize all figures.
We'll do this by editing the YAML.

## Visualizing other variables - Your turn!

13. Pick a single categorical variable from the data set and make a bar plot of its distribution.

```{r}
#| label: barplot

# add code here
```

14. Pick two categorical variables and make a visualization to visualize the relationship between the two variables. Along with your code and output, provide an interpretation of the visualization.

```{r}
#| label: cat-cat

# add code here
```

Interpretation goes here...

15. Make another plot that uses at least three variables. At least one should be numeric and at least one categorical. In 1-2 sentences, describe what the plot shows about the relationships between the variables you plotted. Don't forget to label your code chunk.

```{r}
# add code here
```

Interpretation goes here...
